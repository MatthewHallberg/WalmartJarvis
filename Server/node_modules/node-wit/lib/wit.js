/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 */

'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _require = require('./config'),
    DEFAULT_API_VERSION = _require.DEFAULT_API_VERSION,
    DEFAULT_WIT_URL = _require.DEFAULT_WIT_URL;

var fetch = require('isomorphic-fetch');
var log = require('./log');
var Url = require('url');
var HttpsProxyAgent = require('https-proxy-agent');

var learnMore = 'Learn more at https://wit.ai/docs/quickstart';

function getProxyAgent(witURL) {
  var url = Url.parse(witURL);
  var proxy = url.protocol === "http:" ? process.env.http_proxy || process.env.HTTP_PROXY : process.env.https_proxy || process.env.HTTPS_PROXY;
  var noProxy = process.env.no_proxy || process.env.NO_PROXY;

  var shouldIgnore = noProxy && noProxy.indexOf(url.hostname) > -1;
  if (proxy && !shouldIgnore) {
    return new HttpsProxyAgent(proxy);
  }
  if (!proxy) return null;
}

function Wit(opts) {
  if (!(this instanceof Wit)) {
    return new Wit(opts);
  }

  var _config = this.config = Object.freeze(validate(opts)),
      accessToken = _config.accessToken,
      apiVersion = _config.apiVersion,
      headers = _config.headers,
      logger = _config.logger,
      witURL = _config.witURL,
      proxy = _config.proxy;

  this._sessions = {};

  this.message = function (message, context, n, verbose, junk) {
    var qs = 'q=' + encodeURIComponent(message);
    if (context) {
      qs += '&context=' + encodeURIComponent(JSON.stringify(context));
    }
    if (typeof n === 'number') {
      qs += '&n=' + encodeURIComponent(JSON.stringify(n));
    }
    if (verbose != null) {
      qs += '&verbose=' + encodeURIComponent(JSON.stringify(verbose));
    }
    if (junk != null) {
      qs += '&junk=true';
    }
    var method = 'GET';
    var fullURL = witURL + '/message?' + qs;
    var handler = makeWitResponseHandler(logger, 'message');
    logger.debug(method, fullURL);
    return fetch(fullURL, {
      method: method,
      headers: headers,
      proxy: proxy
    }).then(function (response) {
      return Promise.all([response.json(), response.status]);
    }).then(handler);
  };
}

var makeWitResponseHandler = function makeWitResponseHandler(logger, endpoint) {
  return function (rsp) {
    var error = function error(err) {
      logger.error('[' + endpoint + '] Error: ' + err);
      throw err;
    };

    if (rsp instanceof Error) {
      return error(rsp);
    }

    var _rsp = _slicedToArray(rsp, 2),
        json = _rsp[0],
        status = _rsp[1];

    if (json instanceof Error) {
      return error(json);
    }

    var err = json.error || status !== 200 && json.body + ' (' + status + ')';

    if (err) {
      return error(err);
    }

    logger.debug('[' + endpoint + '] Response: ' + JSON.stringify(json));
    return json;
  };
};

var validate = function validate(opts) {
  if (!opts.accessToken) {
    throw new Error('Could not find access token, learn more at https://wit.ai/docs');
  }
  opts.witURL = opts.witURL || DEFAULT_WIT_URL;
  opts.apiVersion = opts.apiVersion || DEFAULT_API_VERSION;
  opts.headers = opts.headers || {
    'Authorization': 'Bearer ' + opts.accessToken,
    'Accept': 'application/vnd.wit.' + opts.apiVersion + '+json',
    'Content-Type': 'application/json'
  };
  opts.logger = opts.logger || new log.Logger(log.INFO);
  opts.proxy = getProxyAgent(opts.witURL);

  return opts;
};

module.exports = Wit;